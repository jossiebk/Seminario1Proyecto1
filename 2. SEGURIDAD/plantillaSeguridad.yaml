AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  CidrBlock:
    Description: "besides the vpc, i have added  the security groups at the bottom"
    Type: String
    Default: 22.22.0.0/16
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: CidrBlock
      Tags:
        - Key: "redproyecto1"
          Value: !Sub ${AWS::StackName} Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: InternetGateway
      VpcId: 
        Ref: VPC  
        
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [0, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "subPublicaA"
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [1, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "subPrivadaA"
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: !Select [1 , !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [2, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "subPublicaB"
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)             
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [3, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "subPrivadaB"
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)    		   
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 
      
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
      
  InstanceSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: permito ssh y http a los servers privados y publicos
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
        
  InstanceSecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: permito ssh a los server privados
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22   
        CidrIp: 22.22.0.0/16 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 22.22.0.0/0         
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0        

Outputs:
  GrupoDeSeguridad1:
    Description: "se muestra el nombre del security group creado para lo publico"
    Value: !Ref InstanceSecurityGroup1
    Export:
      Name: "GrupoPublico"
  GrupoDeSeguridad2:
    Description: "se muestra el nombre del security group creado para lo privado"
    Value: !Ref InstanceSecurityGroup2
    Export:
      Name: "GupoPrivado"